#include "ForestTree.hpp"

/* =========================================================================== */
/* ============================== Конструкторы =============================== */
/* =========================================================================== */

// Конструктор по умолчанию
ForestTree::ForestTree():Tree(), amountOfWood(0.0)
{}

// Конструктор с параметром
ForestTree::ForestTree(std::string timeName, size_t timeAge,  double timeAmount): Tree(timeName, timeAge, Tipe::Deciduous), amountOfWood(timeAmount)
{}

// Конструктор копирования
ForestTree::ForestTree(const ForestTree& rhs):Tree(rhs), amountOfWood(rhs.amountOfWood)
{}

//Деструктор
ForestTree::~ForestTree()
{}
/* =========================================================================== */



/* =========================================================================== */
/* ============================ Геттеры ====================================== */
/* =========================================================================== */

// Получение количества древесины
double ForestTree::getAmountOfWood() const
{
	return this->amountOfWood;
}
/* =========================================================================== */



/* =========================================================================== */
/* ================================= Сеттеры ================================= */
/* =========================================================================== */

// Установка количества древесины
void ForestTree::setAmountOfWood(double timeAmountOfWood)
{
	this->amountOfWood = timeAmountOfWood;
}
/* ======================================================================== */



/* =========================================================================== */
/* =================== Перегрузка дефолтного оператора присваивания ==================== */
/* =========================================================================== */
ForestTree& ForestTree::operator=(const ForestTree& rhs)
{
	Tree::operator=(rhs);
	if (this != &rhs)
	{
		this->amountOfWood = rhs.amountOfWood;
	}
	return *this;
}
/* ======================================================================== */



/* =============================================== */
/* =================== Методы ==================== */
/* =============================================== */
void ForestTree::print() const
{
	std::cout << name << '\t' << age << '\t' << "Deciduous" << '\t' << amountOfWood << '\n';
}

/* ======================================================================== */
