#include "Tree.hpp"

/* =========================================================================== */
/* ============================== Конструкторы =============================== */
/* =========================================================================== */

// Конструктор по умолчанию
Tree::Tree():name("No name"), age(0), tipe(Tipe::Coniferous)
{}

// Конструктор с параметром
Tree::Tree(std::string timeName, size_t timeAge, Tipe timeTipe): name(timeName), age(timeAge), tipe(timeTipe)
{}

// Конструктор копирования
Tree::Tree(const Tree& rhs): name(rhs.name), age(rhs.age), tipe(rhs.tipe)
{}

//Деструктор
Tree::~Tree()
{}
/* =========================================================================== */



/* =========================================================================== */
/* ============================ Геттеры ====================================== */
/* =========================================================================== */

// Получение имени
std::string Tree::getName() const
{
	return name;
}

// Получение возраста
size_t Tree::getAge() const
{
	return age;
}
/* =========================================================================== */



/* =========================================================================== */
/* ================================= Сеттеры ================================= */
/* =========================================================================== */

// Установка имени
void Tree::setName(std::string timeName)
{
	name = timeName;
}

// Установка возраста
void Tree::setAge(size_t timeAge)
{
	if (timeAge < 0)
	{
		throw std::invalid_argument("Age cann't be less than 0!");
	}
	age = timeAge;
}
/* ======================================================================== */



/* =========================================================================== */
/* =================== Перегрузка дефолтного оператора присваивания ==================== */
/* =========================================================================== */
Tree& Tree::operator=(const Tree& rhs)
{
	if (this != &rhs)
	{
		this->name = rhs.name;
		this->age = rhs.age;
		this->tipe = rhs.tipe;
	}
	return *this;
}
/* ======================================================================== */



/* =============================================== */
/* =================== Методы ==================== */
/* =============================================== */
//Виртуальный метод вывода информации
void Tree::print() const
{
}
/* ======================================================================== */
