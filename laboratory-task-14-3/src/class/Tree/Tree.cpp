#include "Tree.hpp"

/* =========================================================================== */
/* ============================== Конструкторы =============================== */
/* =========================================================================== */



// Конструктор с параметром
Tree::Tree(std::string timeName, size_t timeAge, Tipe timeTipe): name(timeName), age(timeAge), tipe(timeTipe)
{
	if (timeName.length() == 0)
	{
		throw std::runtime_error("Tree name is empty\n");
	}
	if (timeAge < 0 )
	{
		throw std::runtime_error("Age cann't be less than 0!\n");
	}
	
	
}

// Конструктор копирования
Tree::Tree(const Tree& rhs): name(rhs.name), age(rhs.age), tipe(rhs.tipe)
{
	if (rhs.name.length() == 0)
	{
		throw std::runtime_error("Tree name is empty\n");
	}
	if (rhs.age < 0 )
	{
		throw std::runtime_error("Age cann't be less than 0!\n");
	}
}

//Деструктор
Tree::~Tree()
{}
/* =========================================================================== */



/* =========================================================================== */
/* ============================ Геттеры ====================================== */
/* =========================================================================== */

// Получение имени
std::string Tree::getName() const
{
	return name;
}

// Получение возраста
size_t Tree::getAge() const
{
	return age;
}
// Получение типа
Tipe Tree::getTypeTree() const
{
	return tipe;
}
/* =========================================================================== */



/* =========================================================================== */
/* ================================= Сеттеры ================================= */
/* =========================================================================== */

// Установка имени
void Tree::setName(std::string timeName)
{
	name = timeName;
}

// Установка возраста
void Tree::setAge(size_t timeAge)
{
	if (timeAge < 0)
	{
		throw std::invalid_argument("Age cann't be less than 0!");
	}
	age = timeAge;
}

// Установка типа
void Tree::setType(Tipe timeType) 
{
	tipe = timeType;
}
/* ======================================================================== */


/* =============================================== */
/* =================== Методы ==================== */
/* =============================================== */
//Виртуальный метод вывода информации
void Tree::print() const
{
}
/* ======================================================================== */
