#include "Person.hpp"
/* =========================================================================== */
/* ============================== Конструкторы =============================== */
/* =========================================================================== */

// Конструктор с параметром
Person::Person(const char* timeName)
{
	fullName = new char[strlen(timeName) + 1];
	strcpy(fullName, timeName);

}

// Конструктор копирования
Person::Person(const Person& rhs)
{
	fullName = new char[strlen(rhs.fullName) + 1];
	strcpy(fullName, rhs.fullName);

}
//Деструктор
Person::~Person()
{
	delete[] fullName;
}
/* =========================================================================== */




/* =========================================================================== */
/* ============================ Геттеры ====================================== */
/* =========================================================================== */

// Получение ФИО
char* Person::getFullName() const
{
	return fullName;
}
/* =========================================================================== */




/* =========================================================================== */
/* ================================= Сеттеры ================================= */
/* =========================================================================== */

// Установка ФИО
void Person::setFullName(char* fullName)
{
	delete[] this->fullName;
	this->fullName = new char[strlen(fullName) + 1];
	strcpy(this->fullName, fullName);
}

/* =========================================================================== */



/* ========================================================================= */
/* ==================================Метод ================================= */
/* ========================================================================= */

// Виртуальный метод вывода информации
void Person::print(std::ostream& out) const
{
	out << fullName;
}
/* =========================================================================== */

