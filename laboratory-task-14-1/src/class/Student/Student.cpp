#include "Student.hpp"
/* =========================================================================== */
/* ============================== Конструкторы =============================== */
/* =========================================================================== */

// Конструктор с параметром
Student::Student(const char* timeName, size_t timeCourse, size_t timeGroup) : Person(timeName), course(timeCourse), group(timeGroup)
{}

// Конструктор копирования
Student::Student(const Student& rhs) : Person(rhs.fullName), course(rhs.course), group(rhs.group)
{}

//Деструктор
Student::~Student()
{}
/* =========================================================================== */




/* =========================================================================== */
/* ============================ Геттеры ====================================== */
/* =========================================================================== */

// Получение курса
size_t Student::getCourse() const
{
	return course;
}

// Получение группы
size_t Student::getGroup() const
{
	return group;
}
/* =========================================================================== */




/* =========================================================================== */
/* ================================= Сеттеры ================================= */
/* =========================================================================== */

// Установка курса
void Student::setCourse(size_t course)
{
	this->course = course;
}

// Установка группы
void Student::setGroup(size_t group)
{
	this->group = group;
}
/* =========================================================================== */



/* ========================================================================= */
/* ==================================Метод ================================= */
/* ========================================================================= */

// Виртуальный метод вывода информации
void Student::print(std::ostream& out) const
{
	out << fullName << '\t' << course << '\t' << group << '\n';
}
/* =========================================================================== */

