#include "Professor.hpp"
/* =========================================================================== */
/* ============================== Конструкторы =============================== */
/* =========================================================================== */

// Конструктор с параметром
Professor::Professor(const char* timeFullName, const char* timedepartment) : Person(timeFullName)
{
	department = new char[strlen(timedepartment) + 1];
	strcpy(department, timedepartment);

}

// Конструктор копирования
Professor::Professor(const Professor& rhs) : Person(rhs.fullName)
{
	if (rhs.department == nullptr) {
		throw std::invalid_argument("Wrong input! Empty string!");
	}
	department = new char[strlen(rhs.department) + 1];
	strcpy(fullName, rhs.department);
}

//Деструктор
Professor::~Professor()
{
	Person::~Person();
	delete[] department;
}
/* =========================================================================== */




/* =========================================================================== */
/* ============================ Геттеры ====================================== */
/* =========================================================================== */

// Получение кафедры
char* Professor::getDepartment()
{
	return department;
}
/* =========================================================================== */




/* =========================================================================== */
/* ================================= Сеттеры ================================= */
/* =========================================================================== */

// Установка кафедры
void Professor::setDepartment(const char* timedepartment)
{
	delete[] department;
	this->department = new char[strlen(timedepartment) + 1];
	strcpy(this->department, timedepartment);

}
/* =========================================================================== */


/* ========================================================================= */
/* ==================================Метод ================================= */
/* ========================================================================= */

// Виртуальный метод вывода информации
void Professor::print(std::ostream& out) const
{
	out << fullName << '\t' << department << "\n";
}
/* =========================================================================== */

