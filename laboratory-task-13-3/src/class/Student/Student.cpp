#include"Student.hpp"

	/* =========================================================================== */
	/* ============================== Конструктор  =============================== */
	/* =========================================================================== */

	Student::Student():name("No name"), course(0), group(0), recordBookNumber(0)
	{
	}

	// Конструктор с параметром
	Student::Student(const std::string& name, size_t course, size_t group, size_t recordBookNumber) :name(name),
	course(course), group(group), recordBookNumber(recordBookNumber)
	{
	}

	// Конструктор копирования
	Student::Student(const Student& other) :name(other.name),  course(other.course), group(other.group),
	recordBookNumber(other.recordBookNumber)
	{
	}

	// Деструктор
	Student::~Student()
	{}
	/* =========================================================================== */




	/* =========================================================================== */
	/* ============================ Геттеры ====================================== */
	/* =========================================================================== */
	//Получения имени
	const std::string& Student::getName() const
	{
		return this->name;
	}

	//Получения курса
	size_t Student::getCourse() const
	{
		return this->course;
	}

	//Получения группы
	size_t Student::getGroup() const
	{
		return this->group;
	}

	//Получения номера записной книжки
	size_t Student::getRecordBookNumber() const
	{
		return this->recordBookNumber;
	}

	/* =========================================================================== */




	/* =========================================================================== */
	/* ================================= Сеттеры ================================= */
	/* =========================================================================== */

	// Установка курса
	void Student::setCourse(size_t timeCourse)
	{
		this->course = timeCourse;
	}
	// Установка группы
	void Student::setGroup(size_t timeGroup)
	{
		this->group = timeGroup;
	}

	/* ======================================================================== */




	/* =========================================================================== */
	/* =================== Перегрузка дефолтного оператора присваивания ==================== */
	/* =========================================================================== */

	Student Student::operator=(const Student& rhs)
	{
		if (this != &rhs)
		{
			this->course = rhs.course;
			this->group = rhs.group;
		}
		return *this;
	}
	/* ======================================================================== */
	

	/* ======================================================== */
	/* ===================	Оператор равно ==================== */
	/* ======================================================== */

	bool Student::operator==(const Student& rhs)
	{
		if (this->name == rhs.name && this->course == rhs.course && this->group == rhs.group && this->recordBookNumber == rhs.recordBookNumber)
		{
			return true;
		}
		return false;
	}
	/* =========================================================================== */


	/* ===================================================== */
	/* =================== Метод вывода ==================== */
	/* ===================================================== */
	void Student::print(std::ostream& out)
	{
		out << name << '\t' << course << '\t' << group << '\t' << recordBookNumber << '\n';
	}

	/* =========================================================================== */




	/* =========================================================================== */
	/* ===================== Перегрузки операторов вывода ======================== */
	/* =========================================================================== */

	// Оператор вывода (дружественный)
	std::ostream& operator<<(std::ostream& out, Student& rhs)
	{
		rhs.print(out);
		return out;
	}
	/* =========================================================================== */